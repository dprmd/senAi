import{r as i,j as s}from"./pnpm-react@18.3.1--FUz9cRTN.js";import{c as O}from"./pnpm-@radix-ui_react-context@1.1.0_@types_react@18.3.3_react@18.3.1--8tErLFxD.js";import{u as A}from"./pnpm-@radix-ui_react-compose-refs@1.1.0_@types_react@18.3.3_react@18.3.1--iQVuCTu7.js";import{c as v,T as j,O as b,W as w,C as M,a as I,D as L,b as D,P as $,R as F}from"./pnpm-@radix-ui_react-dialog@1.1.1_@types_react-dom@18.3.0_@types_react@18.3.3_react-dom@18.3.1_react@18.3.1__react@18.3.1--D56qXoh9.js";import{c as G}from"./pnpm-@radix-ui_primitive@1.1.0--DW48STyt.js";import{S as W}from"./pnpm-@radix-ui_react-slot@1.1.0_@types_react@18.3.3_react@18.3.1--C35REI_A.js";var f="AlertDialog",[Y,re]=O(f,[v]),l=v(),m=e=>{const{__scopeAlertDialog:o,...r}=e,a=l(o);return s.jsx(F,{...a,...r,modal:!0})};m.displayName=f;var q="AlertDialogTrigger",B=i.forwardRef((e,o)=>{const{__scopeAlertDialog:r,...a}=e,t=l(r);return s.jsx(j,{...t,...a,ref:o})});B.displayName=q;var H="AlertDialogPortal",_=e=>{const{__scopeAlertDialog:o,...r}=e,a=l(o);return s.jsx($,{...a,...r})};_.displayName=H;var V="AlertDialogOverlay",y=i.forwardRef((e,o)=>{const{__scopeAlertDialog:r,...a}=e,t=l(r);return s.jsx(b,{...t,...a,ref:o})});y.displayName=V;var n="AlertDialogContent",[k,z]=Y(n),N=i.forwardRef((e,o)=>{const{__scopeAlertDialog:r,children:a,...t}=e,d=l(r),p=i.useRef(null),T=A(o,p),g=i.useRef(null);return s.jsx(w,{contentName:n,titleName:R,docsSlug:"alert-dialog",children:s.jsx(k,{scope:r,cancelRef:g,children:s.jsxs(M,{role:"alertdialog",...d,...t,ref:T,onOpenAutoFocus:G(t.onOpenAutoFocus,c=>{var u;c.preventDefault(),(u=g.current)==null||u.focus({preventScroll:!0})}),onPointerDownOutside:c=>c.preventDefault(),onInteractOutside:c=>c.preventDefault(),children:[s.jsx(W,{children:a}),s.jsx(K,{contentRef:p})]})})})});N.displayName=n;var R="AlertDialogTitle",x=i.forwardRef((e,o)=>{const{__scopeAlertDialog:r,...a}=e,t=l(r);return s.jsx(I,{...t,...a,ref:o})});x.displayName=R;var E="AlertDialogDescription",C=i.forwardRef((e,o)=>{const{__scopeAlertDialog:r,...a}=e,t=l(r);return s.jsx(L,{...t,...a,ref:o})});C.displayName=E;var J="AlertDialogAction",h=i.forwardRef((e,o)=>{const{__scopeAlertDialog:r,...a}=e,t=l(r);return s.jsx(D,{...t,...a,ref:o})});h.displayName=J;var P="AlertDialogCancel",S=i.forwardRef((e,o)=>{const{__scopeAlertDialog:r,...a}=e,{cancelRef:t}=z(P,r),d=l(r),p=A(o,t);return s.jsx(D,{...d,...a,ref:p})});S.displayName=P;var K=({contentRef:e})=>{const o=`\`${n}\` requires a description for the component to be accessible for screen reader users.

You can add a description to the \`${n}\` by passing a \`${E}\` component as a child, which also benefits sighted users by adding visible context to the dialog.

Alternatively, you can use your own component as a description by assigning it an \`id\` and passing the same value to the \`aria-describedby\` prop in \`${n}\`. If the description is confusing or duplicative for sighted users, you can use the \`@radix-ui/react-visually-hidden\` primitive as a wrapper around your description component.

For more information, see https://radix-ui.com/primitives/docs/components/alert-dialog`;return i.useEffect(()=>{var a;document.getElementById((a=e.current)==null?void 0:a.getAttribute("aria-describedby"))||console.warn(o)},[o,e]),null},ae=m,te=_,se=y,ie=N,le=h,ne=S,ce=x,pe=C;export{le as A,ie as C,pe as D,se as O,te as P,ae as R,ce as T,ne as a};
